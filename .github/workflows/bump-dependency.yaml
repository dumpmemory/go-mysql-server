name: Bump Deps

on:
  repository_dispatch:
    types: [ bump-dependency ]

jobs:
  get-label:
    name: Get Label
    outputs:
      label: ${{ steps.get-label.outputs.label }}
    runs-on: ubuntu-22.04
    steps:
      - name: Get Label (allow-listed dependencies only)
        id: get-label
        env:
          REPO: ${{ github.event.client_payload.dependency }}
        run: |
          set -euo pipefail
          IFS=$'\n\t'

          # allow-list: only 'vitess' at present
          case "${REPO:-}" in
            vitess)
              echo "label=vitess-bump" >> "$GITHUB_OUTPUT"
              ;;
            *)
              echo "Dependency '${REPO:-}' is unsupported"
              exit 1
              ;;
          esac

  stale-bump-prs:
    name: Retrieving Stale Bump PRs
    needs: get-label
    outputs:
      stale-pulls: ${{ steps.get-stale-prs.outputs.open-pulls }}
    runs-on: ubuntu-22.04
    steps:
      - name: Get Open Bump PRs
        id: get-stale-prs
        uses: actions/github-script@v7
        env:
          LABEL: ${{ needs.get-label.outputs.label }}
        with:
          debug: true
          github-token: ${{ secrets.REPO_ACCESS_TOKEN }}
          script: |
            try {
              const { LABEL } = process.env;
              const { owner, repo } = context.repo;
              const res = await github.rest.pulls.list({
                owner,
                repo,
                state: 'open',
                sort: 'created',
                direction: 'desc',
              });

              const { data } = res;
              const reduced = data.reduce((acc, p) => {
                if (p.labels.length < 1) return acc;

                let keepAlive = false;
                let shouldPush = false;

                for (const label of p.labels) {
                  if (label.name === LABEL) {
                    shouldPush = true;
                  }
                  if (label.name === "keep-alive") {
                    keepAlive = true;
                  }
                }
                if (shouldPush) {
                  acc.push({
                    number: p.number,
                    keepAlive,
                    headRef: p.head.ref,
                  });
                }
                return acc;
              }, []);

              console.log(reduced);
              if (reduced.length > 0) core.setOutput("open-pulls", JSON.stringify(reduced));
              process.exit(0);
            } catch(err) {
              console.log("Error:", err);
              process.exit(1);
            }

  open-bump-pr:
    needs: [get-label, stale-bump-prs]
    name: Open Bump PR
    runs-on: ubuntu-22.04
    outputs:
      latest-pr: ${{ steps.latest-pr.outputs.pr_url }}
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.REPO_ACCESS_TOKEN || secrets.GITHUB_TOKEN }}

      - name: Set up Go 1.x
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod

      - name: Validate & Sanitize Payload
        id: sanitize
        env:
          RAW_DEP:  ${{ github.event.client_payload.dependency }}
          RAW_SHA:  ${{ github.event.client_payload.head_commit_sha }}
          RAW_USER: ${{ github.event.client_payload.assignee }}
          RAW_MAIL: ${{ github.event.client_payload.assignee_email }}
        run: |
          set -euo pipefail
          IFS=$'\n\t'

          # --- Validate dependency via allow-list and map to module path
          case "${RAW_DEP:-}" in
            vitess)
              MODULE='github.com/dolthub/vitess'
              ;;
            *)
              echo "Unsupported dependency '${RAW_DEP:-}'"
              exit 1
              ;;
          esac

          # --- Validate head SHA/tag (conservative)
          # allow only hex SHAs or safe tag-ish: letters, digits, dot, dash, underscore, plus
          if [ -z "${RAW_SHA:-}" ] || ! printf '%s' "$RAW_SHA" | grep -qE '^[A-Za-z0-9._+-]+$'; then
            echo "Invalid head_commit_sha"
            exit 1
          fi

          # Keep a short 8-char form if it's a hex SHA; otherwise keep original (already validated)
          if printf '%s' "$RAW_SHA" | grep -qiE '^[0-9a-f]{40}$'; then
            SHORT_SHA="${RAW_SHA:0:8}"
          else
            # derive a short-ish safe token
            SHORT_SHA="$(printf '%s' "$RAW_SHA" | tr -cd 'A-Za-z0-9._+-' | cut -c1-12)"
          fi

          # --- Validate assignee username (GitHub-compatible subset)
          if [ -z "${RAW_USER:-}" ] || ! printf '%s' "$RAW_USER" | grep -qE '^[A-Za-z0-9-]{1,39}$'; then
            echo "Invalid assignee username"
            exit 1
          fi

          # --- Validate email; if invalid, fall back to GitHub noreply
          if [ -n "${RAW_MAIL:-}" ] && printf '%s' "$RAW_MAIL" | grep -qE '^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}$'; then
            SAFE_EMAIL="$RAW_MAIL"
          else
            SAFE_EMAIL="${RAW_USER}+noreply@users.noreply.github.com"
          fi

          # --- Build a safe branch name: <assignee>-<short>
          BRANCH_NAME="$(printf '%s-%s' "$RAW_USER" "$SHORT_SHA" | tr -cd 'A-Za-z0-9._-')"

          # Export for later steps
          {
            echo "SAFE_MODULE=$MODULE"
            echo "SAFE_HEAD=$RAW_SHA"
            echo "SAFE_ASSIGNEE=$RAW_USER"
            echo "SAFE_EMAIL=$SAFE_EMAIL"
            echo "SAFE_BRANCH=$BRANCH_NAME"
            echo "SAFE_SHORT=$SHORT_SHA"
          } >> "$GITHUB_ENV"

      - name: Bump dependency (safe)
        run: |
          set -euo pipefail
          IFS=$'\n\t'
          echo "Installing ${SAFE_MODULE}@${SAFE_HEAD}"
          GOOS=linux go get "${SAFE_MODULE}@${SAFE_HEAD}"

      - name: Get Assignee and Reviewer (safe)
        id: get_reviewer
        env:
          ASSIGNEE: ${{ env.SAFE_ASSIGNEE }}
        run: |
          set -euo pipefail
          if [ "${ASSIGNEE}" = "zachmu" ]; then
            echo "reviewer=Hydrocharged" >> "$GITHUB_OUTPUT"
          else
            echo "reviewer=zachmu" >> "$GITHUB_OUTPUT"
          fi

      - name: Create and Push new branch (safe)
        env:
          GIT_USER:  ${{ env.SAFE_ASSIGNEE }}
          GIT_MAIL:  ${{ env.SAFE_EMAIL }}
          BRANCH:    ${{ env.SAFE_BRANCH }}
          COMMIT_BY: ${{ env.SAFE_ASSIGNEE }}
        run: |
          set -euo pipefail
          IFS=$'\n\t'

          git config --global user.name "${GIT_USER}"
          git config --global user.email "${GIT_MAIL}"

          git checkout -b "${BRANCH}"
          git add .

          # Commit message uses sanitized assignee only
          git commit -m "[ga-bump-dep] Bump dependency in GMS by ${COMMIT_BY}"
          git push origin "${BRANCH}"

      - name: pull-request
        uses: repo-sync/pull-request@v2
        id: latest-pr
        with:
          source_branch: ${{ env.SAFE_BRANCH }}
          destination_branch: "main"
          github_token: ${{ secrets.REPO_ACCESS_TOKEN }}
          pr_title: "[auto-bump] [no-release-notes] dependency by ${{ env.SAFE_ASSIGNEE }}"
          pr_template: ".github/markdown-templates/dep-bump.md"
          pr_reviewer: ${{ steps.get_reviewer.outputs.reviewer }}
          pr_assignee: ${{ env.SAFE_ASSIGNEE }}
          pr_label: ${{ needs.get-label.outputs.label }}

  comment-on-stale-prs:
    needs: [open-bump-pr, stale-bump-prs]
    if: ${{ needs.stale-bump-prs.outputs.stale-pulls != '' }}
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        pull: ${{ fromJson(needs.stale-bump-prs.outputs.stale-pulls) }}
    steps:
      - name: Comment/Close Stale PRs
        id: get-stale-prs
        uses: actions/github-script@v7
        env:
          PULL: ${{ toJson(matrix.pull) }}
          SUPERSEDED_BY: ${{ needs.open-bump-pr.outputs.latest-pr }}
        with:
          debug: true
          github-token: ${{ secrets.REPO_ACCESS_TOKEN }}
          script: |
            try {
              const { owner, repo } = context.repo;
              const { PULL, SUPERSEDED_BY } = process.env;
              const pull = JSON.parse(PULL);

              if (pull.keepAlive) process.exit(0);

              const checkSuiteRes = await github.rest.checks.listSuitesForRef({
                owner,
                repo,
                ref: pull.headRef,
              });

              if (checkSuiteRes.data) {
                for (const suite of checkSuiteRes.data.check_suites) {
                  console.log("suite id:", suite.id);
                  console.log("suite app slug:", suite.app.slug);
                  console.log("suite status:", suite.status);
                  console.log("suite conclusion:", suite.conclusion);
                  if (suite.app.slug === "github-actions") {
                     if (suite.status !== "completed" || suite.conclusion !== "success") {
                       console.log(`Leaving pr open due to status:${suite.status} conclusion${suite.conclusion}`);
                       process.exit(0);
                     }
                  }
                }

                console.log(`Closing open pr ${pull.number}`);
                await github.rest.issues.createComment({
                  issue_number: pull.number,
                  owner,
                  repo,
                  body: `This PR has been superseded by ${SUPERSEDED_BY}`
                });

                await github.rest.pulls.update({
                  owner,
                  repo,
                  pull_number: pull.number,
                  state: 'closed',
                });
              }

              process.exit(0);
            } catch(err) {
              console.log("Error:", err);
              process.exit(1);
            }
